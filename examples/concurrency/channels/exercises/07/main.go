package main

import "fmt"

func main() {
	unbuffch := make(chan string)
	unbuffch2 := make(chan string)

	go ping(unbuffch)

	unbuffch <- "ping"

	go pong(unbuffch2)

	v := <-unbuffch2

	fmt.Println(v)

	close(unbuffch)
	close(unbuffch2)
	// No more values to be sent.

	// send
	// c <- v

	// receive
	// v, ok = <- c
	// ok = true, value generated by a write.
	// ok = false, value generated by a close.

	// 	Channels are blocking
	// <- ch
	// Goroutine wait for a value to be sent.

	// ch <- value
	// Goroutine wait for a receiver to be ready.
	// It is responsibility of channel to make the goroutine runnable again once it has data.

	// for value := range ch {
	// 	...
	// 	}
	// Iterate over values received from a channel
	// Loop automatically breaks, when a channel is closed.
	// range does not return the second boolean value

}

func ping(in <-chan string) {
	fmt.Print(<-in)
}

func pong(out chan<- string) {
	out <- " pong"
}
