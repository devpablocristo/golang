version: "3.8"

services:
  go-micro-api:
    container_name: "go-micro"
    build:
      context: ..
      dockerfile: config/Dockerfile.dev
    image: "go-micro-api:${APP_VERSION}"
    ports:
      - "${ROUTER_PORT}:${ROUTER_PORT}"
      - "${DELVE_PORT}:${DELVE_PORT}"
    volumes:
      - type: bind
        source: ..
        target: /app
      - type: bind
        source: ../migrations
        target: /app/migrations
    environment:
      - MAIN_DIR=/app/cmd/examples/go-micro/main.go
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      - DEBUG=${DEBUG}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_HOST_PORT=${POSTGRES_HOST_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_USER_PASSWORD=${POSTGRES_USER_PASSWORD}
      - CONSUL_ADDRESS=${CONSUL_ADDRESS}
      - CONSUL_ID=${CONSUL_ID}
      - CONSUL_NAME=${CONSUL_NAME}
      - CONSUL_SERVICE_NAME=${CONSUL_SERVICE_NAME}
      - CONSUL_HEALTH_CHECK=${CONSUL_HEALTH_CHECK}
      - CONSUL_CHECK_INTERVAL=${CONSUL_CHECK_INTERVAL}
      - CONSUL_CHECK_TIMEOUT=${CONSUL_CHECK_TIMEOUT}
      - CONSUL_PORT=${CONSUL_PORT}
      - CONSUL_TAGS=${CONSUL_TAGS}
      - CASSANDRA_HOST=${CASSANDRA_HOST}
      - CASSANDRA_PORT=${CASSANDRA_PORT}
      - CASSANDRA_USERNAME=${CASSANDRA_USERNAME}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - CASSANDRA_REPLICATION_FACTOR=${CASSANDRA_REPLICATION_FACTOR}
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_RACK=${CASSANDRA_RACK}
      - CASSANDRA_ENDPOINT_SNITCH=${CASSANDRA_ENDPOINT_SNITCH}
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - PYROSCOPE_SERVER_ADDRESS=${PYROSCOPE_SERVER_ADDRESS}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - RABBITMQ_HOST=${RABBITMQ_HOST}      
      - RABBITMQ_PORT=${RABBITMQ_PORT}          
      - RABBITMQ_MANAGEMENT_PORT=${RABBITMQ_MANAGEMENT_PORT} 
      - RABBITMQ_USER=${RABBITMQ_USER}        
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}    
      - RABBITMQ_VHOST=${RABBITMQ_VHOST} 
      - DYNAMODB_ENDPOINT=${DYNAMODB_ENDPOINT} 
      - DYNAMODB_PORT=${DYNAMODB_PORT}          
      - DYNAMODB_REGION=${DYNAMODB_REGION} 
      - GOMICRO_RPC_SERVICE_NAME=${GOMICRO_RPC_SERVICE_NAME}
      - GOMICRO_RPC_SERVICE_ADDRESS=${GOMICRO_RPC_SERVICE_ADDRESS}
      - GOMICRO_WEB_SERVICE_NAME=${GOMICRO_WEB_SERVICE_NAME}
      - GOMICRO_WEB_SERVICE_ADDRESS=${GOMICRO_WEB_SERVICE_ADDRESS}
    depends_on:
      - postgres
      - consul
      - cassandra
      - mysql
      - redis
      - prometheus
      - grafana
      - pyroscope
      - mongodb
      - rabbitmq
      - dynamodb
    networks:
      - app-network
    restart: on-failure
    profiles:
      - go-micro
    command: air -c .air.toml

  monitoring-api:
    container_name: "monitoring"
    build:
      context: ..
      dockerfile: config/Dockerfile.dev
    image: "monitoring-api:${APP_VERSION}"
    ports:
      - "${ROUTER_PORT}:${ROUTER_PORT}"
      - "${DELVE_PORT}:${DELVE_PORT}"
    volumes:
      - type: bind
        source: ..
        target: /app
    environment:
      - MAIN_DIR=/app/cmd/examples/monitoring/main.go
      - APP_NAME=monitoring-api
      - APP_VERSION=${APP_VERSION}
      - DEBUG=${DEBUG}
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - mysql
      - prometheus
      - grafana
    networks:
      - app-network
    restart: on-failure
    profiles:
      - monitoring    
    command: air -c .air.toml  

  greeter-server-api:
    container_name: "greeter-server"
    build:
      context: ..
      dockerfile: config/Dockerfile.dev # Ruta al Dockerfile del servidor
    image: "greeter-server:${APP_VERSION}"
    ports:
      - "${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}" # Exponer el puerto del servidor gRPC
      - "${DELVE_PORT_SERVER}:${DELVE_PORT_SERVER}" # Puerto para debugging con Delve
    environment:
      - GRPC_SERVER_HOST=0.0.0.0 # Escuchar en todas las interfaces
      - GRPC_SERVER_PORT=${GRPC_SERVER_PORT}
      - MAIN_DIR=/app/cmd/examples/greeter-server/main.go
      - APP_NAME=greeter-server-api
      - APP_VERSION=${APP_VERSION}
      - DEBUG=${DEBUG}
      - FORCE_COLOR=1  # Añadir aquí
    networks:
      - app-network
    volumes:
      - type: bind
        source: ..
        target: /app
    restart: on-failure
    profiles:
      - greeter-server
      - greeter-service
    command: air -c .air.toml

  greeter-client-api:
    container_name: "greeter-client"
    build:
      context: ..
      dockerfile: config/Dockerfile.dev # Ruta al Dockerfile del cliente
    image: "greeter-client:${APP_VERSION}"
    ports:
    - "${DELVE_PORT_SERVER}:${DELVE_PORT_SERVER}"
    environment:
      # - GRPC_SERVER_HOST=greeter-server # Nombre del servicio del servidor gRPC
      # - GRPC_SERVER_HOST=${GRPC_SERVER_HOST:-localhost} # Usa localhost cuando estás en modo host
      # - GRPC_SERVER_HOST=172.17.0.1
      - AIR_CONFIG=/app/config/.air.toml  # Archivo de configuración para Air
      - GRPC_SERVER_PORT=${GRPC_SERVER_PORT}
      - MAIN_DIR=/app/cmd/examples/greeter-client/main.go
      - APP_NAME=greeter-client-api
      - APP_VERSION=${APP_VERSION}
      - DEBUG=${DEBUG}
    # networks:
    #   - app-network
    network_mode: "host"  # Usa la red del host
    volumes:
      - type: bind
        source: ..
        target: /app
    restart: on-failure
    profiles:
      - greeter-client
      - greeter-service
    command: air -c .air.toml

  postgres:
    image: postgres:16.3
    container_name: postgres
    ports:
      - "${POSTGRES_HOST_PORT}:${POSTGRES_HOST_PORT}"
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: on-failure

  pgadmin:
    image: dpage/pgadmin4:8.8
    container_name: pgadmin
    ports:
      - "${PGADMIN_PORT}:${PGADMIN_TARGET_PORT}"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    logging:
      driver: "none"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    restart: on-failure

  consul:
    image: consul:1.15.4
    container_name: consul
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"
    networks:
      - app-network
    restart: on-failure

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_RACK=${CASSANDRA_RACK}
      - CASSANDRA_SEEDS=${CASSANDRA_HOST}
      - CASSANDRA_ENDPOINT_SNITCH=${CASSANDRA_ENDPOINT_SNITCH}
      - CASSANDRA_USERNAME=${CASSANDRA_USERNAME}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - app-network
    restart: on-failure

  datastax-studio:
    image: datastax/dse-studio:6.8.32
    container_name: datastax-studio
    ports:
      - "${DS_PORT}:${DS_PORT}"
    depends_on:
      - cassandra
    environment:
      - DS_LICENSE=accept
    networks:
      - app-network
    restart: on-failure

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app-network
    restart: on-failure

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    restart: on-failure

  phpmyadmin:
    image: phpmyadmin:5.2.1-apache
    container_name: phpmyadmin
    ports:
      - "${PHPMYADMIN_PORT}:${PHPMYADMIN_TARGET_PORT}"
    environment:
      - PMA_HOST=${MYSQL_HOST}
      - PMA_USER=${MYSQL_USER}
      - PMA_PASSWORD=${MYSQL_PASSWORD}
    depends_on:
      - mysql
    networks:
      - app-network
    restart: on-failure

  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    networks:
      - app-network
    restart: on-failure

  grafana:
    image: grafana/grafana:10.2.8
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: on-failure

  pyroscope:
    image: grafana/pyroscope:weekly-f76-feefa815b
    container_name: pyroscope
    ports:
      - "${PYROSCOPE_PORT}:${PYROSCOPE_PORT}"
    volumes:
      - pyroscope_data:/var/lib/pyroscope
    networks:
      - app-network
    restart: on-failure

  mongodb:
    image: mongo:5.0.28
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: on-failure

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
    ports:
      - "${ME_PORT}:${ME_PORT}"
    depends_on:
      - mongodb
    networks:
      - app-network
    restart: on-failure

  ngrok:
    image: ngrok/ngrok:3.13.0-alpine-91be825
    container_name: ngrok
    command: ["start", "--all", "--config", "/etc/ngrok.yml"]
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    ports:
      - "${NGROK_PORT}:${NGROK_PORT}"
    networks:
      - app-network
    restart: on-failure

  kong-migrations:
    image: kong:2.8.5-alpine
    command: kong migrations bootstrap
    environment:
      - KONG_DATABASE=${KONG_DATABASE}
      - KONG_PG_HOST=${POSTGRES_HOST}
      - KONG_PG_PORT=${POSTGRES_HOST_PORT}
      - KONG_PG_USER=${POSTGRES_USERNAME}
      - KONG_PG_PASSWORD=${POSTGRES_USER_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DATABASE}
    depends_on:
      - postgres
    networks:
      - app-network

  kong:
    image: kong:2.8.5-alpine
    container_name: kong
    environment:
      - KONG_DATABASE=${KONG_DATABASE}
      - KONG_PG_HOST=${POSTGRES_HOST}
      - KONG_PG_PORT=${POSTGRES_HOST_PORT}
      - KONG_PG_USER=${POSTGRES_USERNAME}
      - KONG_PG_PASSWORD=${POSTGRES_USER_PASSWORD}
      - KONG_PG_DATABASE=${POSTGRES_DATABASE}
      - KONG_PROXY_ACCESS_LOG=${KONG_PROXY_ACCESS_LOG}
      - KONG_ADMIN_ACCESS_LOG=${KONG_ADMIN_ACCESS_LOG}
      - KONG_PROXY_ERROR_LOG=${KONG_PROXY_ERROR_LOG}
      - KONG_ADMIN_ERROR_LOG=${KONG_ADMIN_ERROR_LOG}
      - KONG_ADMIN_LISTEN=${KONG_ADMIN_LISTEN}
    ports:
      - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"
      - "${KONG_PROXY_SSL_PORT}:${KONG_PROXY_SSL_PORT}"
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"
      - "${KONG_ADMIN_SSL_PORT}:${KONG_ADMIN_SSL_PORT}"
    depends_on:
      - kong-migrations
    networks:
      - app-network
    restart: on-failure

  rabbitmq:
    image: "rabbitmq:4.0.0-beta.3-management-alpine"
    container_name: rabbitmq
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
    networks:
      - app-network
    restart: on-failure

  dynamodb:
    image: amazon/dynamodb-local:1.24.0
    container_name: dynamodb
    command: "-jar DynamoDBLocal.jar -port ${DYNAMODB_PORT} -sharedDb -dbPath /home/dynamodblocal/data"
    ports:
      - "${DYNAMODB_PORT}:${DYNAMODB_PORT}"
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    networks:
      - app-network
    restart: on-failure

  vault:
    image: vault:1.13.3
    container_name: vault
    ports:
      - "${VAULT_PORT}:${VAULT_PORT}"
    environment:
      VAULT_ADDR: http://localhost:8200
      VAULT_API_ADDR: http://localhost:8200
      VAULT_CLUSTER_ADDR: http://vault:8201
      VAULT_UI: "true"
    volumes:
      - ./config/vault-config.hcl:/vault/config/vault-config.hcl
      - vault_data:/vault/data
    command: vault server -config=/vault/config/vault-config.hcl
    depends_on:
      - consul
    networks:
      - app-network
    restart: on-failure
    cap_add:
      - IPC_LOCK

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  cassandra_data:
  mysql_data:
  pyroscope_data:
  mongodb_data:
  dynamodb_data:
  vault_data:
