// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/adapters/connectors"
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/adapters/gateways"
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/core"
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/core/ports"
)

// Injectors from wire.go:

// Injector es el que ensamblará todas las dependencias
func InitializeApplication() (*authgtw.GinHandler, error) {
	jwtService, err := authconn.NewJwtService()
	if err != nil {
		return nil, err
	}
	repository, err := authconn.NewPostgreSQL()
	if err != nil {
		return nil, err
	}
	httpClient, err := authconn.NewHttpClient()
	if err != nil {
		return nil, err
	}
	sessionManager, err := authconn.NewGorillaSessionManager()
	if err != nil {
		return nil, err
	}
	useCases := ProvideAuthUsecases(jwtService, repository, httpClient, sessionManager)
	ginHandler, err := ProvideGinHandler(useCases)
	if err != nil {
		return nil, err
	}
	return ginHandler, nil
}

// wire.go:

// ProvideAuthUsecases crea la capa de casos de uso de autenticación
func ProvideAuthUsecases(
	jwtService authports.JwtService,
	repository authports.Repository,
	httpClient authports.HttpClient,
	sessionManager authports.SessionManager) authports.UseCases {
	return authe.NewUseCases(jwtService, repository, httpClient, sessionManager)
}

// ProvideGinHandler inicializa el manejador Gin con los casos de uso de autenticación
func ProvideGinHandler(usecases authports.UseCases) (*authgtw.GinHandler, error) {
	return authgtw.NewGinHandler(usecases)
}
