// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/adapters/connectors"
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/adapters/gateways"
	"github.com/devpablocristo/golang/sdk/sg/auth/internal/core"
	"github.com/google/wire"
)

// Injectors from wire.go:

// NewApplication creates a new application instance with all dependencies wired
func NewApplication() (*Application, error) {
	jwtService, err := authconn.NewJwtService()
	if err != nil {
		return nil, err
	}
	repository, err := authconn.NewPostgreSQL()
	if err != nil {
		return nil, err
	}
	httpClient, err := authconn.NewHttpClient()
	if err != nil {
		return nil, err
	}
	sessionManager, err := authconn.NewGorillaSessionManager()
	if err != nil {
		return nil, err
	}
	useCases := auth.NewUseCases(jwtService, repository, httpClient, sessionManager)
	ginHandler, err := authgtw.NewGinHandler(useCases)
	if err != nil {
		return nil, err
	}
	application := &Application{
		Handler: ginHandler,
	}
	return application, nil
}

// wire.go:

// ProviderSet contains all the providers needed for the application
var ProviderSet = wire.NewSet(authconn.NewJwtService, authconn.NewHttpClient, authconn.NewGorillaSessionManager, authconn.NewPostgreSQL, auth.NewUseCases, authgtw.NewGinHandler)

// Application represents the complete application with all its dependencies
type Application struct {
	Handler *authgtw.GinHandler
}
