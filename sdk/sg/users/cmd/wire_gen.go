// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devpablocristo/golang/sdk/sg/users/internal/adapters/connectors"
	"github.com/devpablocristo/golang/sdk/sg/users/internal/adapters/gateways"
	"github.com/devpablocristo/golang/sdk/sg/users/internal/company/adapters/connectors"
	ports3 "github.com/devpablocristo/golang/sdk/sg/users/internal/company/core/ports"
	"github.com/devpablocristo/golang/sdk/sg/users/internal/core"
	"github.com/devpablocristo/golang/sdk/sg/users/internal/core/ports"
	"github.com/devpablocristo/golang/sdk/sg/users/internal/person/adapters/connectors"
	ports2 "github.com/devpablocristo/golang/sdk/sg/users/internal/person/core/ports"
)

// Injectors from wire.go:

// Injector es el que ensamblará todas las dependencias
func InitializeApplication() (*usergtw.GinHandler, error) {
	repository, err := authconn.NewPostgreSQL()
	if err != nil {
		return nil, err
	}
	portsRepository, err := perconn.NewPostgreSQL()
	if err != nil {
		return nil, err
	}
	repository2, err := companyconn.NewPostgreSQL()
	if err != nil {
		return nil, err
	}
	useCases := ProvideUserUsecases(repository, portsRepository, repository2)
	ginHandler, err := ProvideUserGinHandler(useCases)
	if err != nil {
		return nil, err
	}
	return ginHandler, nil
}

// wire.go:

// ProvideAuthUsecases crea la capa de casos de uso de autenticación
func ProvideUserUsecases(
	userRepo ports.Repository,
	personRepo ports2.Repository,
	companyRepo ports3.Repository) ports.UseCases {
	return auth.NewUseCases(userRepo, personRepo, companyRepo)
}

// ProvideGinHandler inicializa el manejador Gin con los casos de uso de autenticación
func ProvideUserGinHandler(usecases ports.UseCases) (*usergtw.GinHandler, error) {
	return usergtw.NewGinHandler(usecases)
}
