package sdkviper

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/spf13/viper"

	sdktools "github.com/devpablocristo/golang/sdk/pkg/tools"
)

// LoadConfig carga archivos de configuración compatibles con Viper y .env
func LoadConfig(filePaths ...string) error {
	if len(filePaths) == 0 {
		return errors.New("no file paths provided")
	}

	configureViper()

	configFilePaths := make(map[string]bool)
	for _, configFilePath := range filePaths {
		// Cargar otros archivos con Viper
		if err := loadViperConfig(configFilePath, configFilePaths); err != nil {
			fmt.Printf("%v\n", err)
			continue
		}
	}

	return nil
}

// configureViper configura Viper para cargar variables de entorno
func configureViper() {
	viper.AutomaticEnv()
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
}

// LoadViperConfig carga un archivo de configuración compatible con Viper
func loadViperConfig(configFilePath string, configFilePaths map[string]bool) error {
	fileNameWithoutExt, fileExtension, err := sdktools.FileNameAndExtension(configFilePath)
	if err != nil {
		return fmt.Errorf("sdkviper: Skipping file '%s': %v", configFilePath, err)
	}

	viper.SetConfigName(fileNameWithoutExt)
	viper.SetConfigType(fileExtension)

	dir := filepath.Dir(configFilePath)
	if !configFilePaths[dir] {
		viper.AddConfigPath(dir)
		configFilePaths[dir] = true
	}

	if err := viper.ReadInConfig(); err != nil {
		fmt.Printf("sdkviper: WARNING: Failed to load configuration file: '%s'\n", configFilePath)
	} else {
		fmt.Printf("sdkviper: Configuration file successfully loaded from: %s\n", viper.ConfigFileUsed())
	}
	return nil
}
