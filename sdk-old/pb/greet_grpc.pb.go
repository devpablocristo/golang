// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: greet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_GreetUnary_FullMethodName           = "/greeter.Greeter/GreetUnary"
	Greeter_GreetServerStreaming_FullMethodName = "/greeter.Greeter/GreetServerStreaming"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	GreetUnary(ctx context.Context, in *GreetUnaryRequest, opts ...grpc.CallOption) (*GreetUnaryResponse, error)
	GreetServerStreaming(ctx context.Context, in *GreetServerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetServerResponse], error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GreetUnary(ctx context.Context, in *GreetUnaryRequest, opts ...grpc.CallOption) (*GreetUnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreetUnaryResponse)
	err := c.cc.Invoke(ctx, Greeter_GreetUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GreetServerStreaming(ctx context.Context, in *GreetServerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GreetServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_GreetServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GreetServerRequest, GreetServerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_GreetServerStreamingClient = grpc.ServerStreamingClient[GreetServerResponse]

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
type GreeterServer interface {
	GreetUnary(context.Context, *GreetUnaryRequest) (*GreetUnaryResponse, error)
	GreetServerStreaming(*GreetServerRequest, grpc.ServerStreamingServer[GreetServerResponse]) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) GreetUnary(context.Context, *GreetUnaryRequest) (*GreetUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetUnary not implemented")
}
func (UnimplementedGreeterServer) GreetServerStreaming(*GreetServerRequest, grpc.ServerStreamingServer[GreetServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GreetServerStreaming not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_GreetUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetUnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GreetUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_GreetUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GreetUnary(ctx, req.(*GreetUnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GreetServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).GreetServerStreaming(m, &grpc.GenericServerStream[GreetServerRequest, GreetServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_GreetServerStreamingServer = grpc.ServerStreamingServer[GreetServerResponse]

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetUnary",
			Handler:    _Greeter_GreetUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetServerStreaming",
			Handler:       _Greeter_GreetServerStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greet.proto",
}
