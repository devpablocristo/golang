// Code generated by MockGen. DO NOT EDIT.
// Source: ./order-manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/devpablocristo/99minutos/order-manager/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderManager is a mock of OrderManager interface.
type MockOrderManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerMockRecorder
}

// MockOrderManagerMockRecorder is the mock recorder for MockOrderManager.
type MockOrderManagerMockRecorder struct {
	mock *MockOrderManager
}

// NewMockOrderManager creates a new mock instance.
func NewMockOrderManager(ctrl *gomock.Controller) *MockOrderManager {
	mock := &MockOrderManager{ctrl: ctrl}
	mock.recorder = &MockOrderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManager) EXPECT() *MockOrderManagerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderManager) CreateOrder(arg0 context.Context, arg1 *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderManagerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderManager)(nil).CreateOrder), arg0, arg1)
}
