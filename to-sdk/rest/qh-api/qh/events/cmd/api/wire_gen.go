// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"fmt"
	"github.com/devpablocristo/qh/events/cmd/api/handlers"
	"github.com/devpablocristo/qh/events/internal/core"
	"github.com/devpablocristo/qh/events/internal/core/event"
	"github.com/devpablocristo/qh/events/internal/platform/config"
	"github.com/devpablocristo/qh/events/internal/platform/repository"
	"github.com/gin-gonic/gin"
	"github.com/go-micro/plugins/v4/registry/consul"
	"github.com/hashicorp/consul/api"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/registry"
	"go-micro.dev/v4/web"
)

// Injectors from build.go:

func InitRouter(config2 *config.Dependencies) (*gin.Engine, error) {
	registry := provideRegistry(config2)
	service := provideMicroservice(registry)
	postgreSQL := provideDatabaseInstance(config2)
	repositoryPort := provideRepository(postgreSQL)
	useCasePort := provideUseCase(repositoryPort)
	restHandler := provideHandler(useCasePort)
	engine := provideRouter(service, restHandler)
	return engine, nil
}

// build.go:

func provideRegistry(config2 *config.Dependencies) registry.Registry {
	return consul.NewRegistry(func(op *registry.Options) {
		op.Addrs = []string{config2.ConsulConfig.Address}
	})
}

func provideMicroservice(reg registry.Registry) web.Service {
	ms := web.NewService(web.Name("events"), web.Version("latest"), web.Registry(reg), web.Address(":8888"))

	if err := ms.Init(); err != nil {
		logger.Fatal(err)
	}
	return ms
}

func provideDatabaseInstance(config2 *config.Dependencies) *db.PostgreSQL {
	return db.NewPostgreSQL(config2.DBConfig)
}

func provideRepository(db2 *db.PostgreSQL) event.RepositoryPort {
	return event.NewRepository(db2)
}

func provideUseCase(repo event.RepositoryPort) core.UseCasePort {
	return core.NewUseCase(repo)
}

func provideHandler(useCase core.UseCasePort) *handler.RestHandler {
	return handler.NewRestHandler(useCase)
}

func provideRouter(ms web.Service, handler2 *handler.RestHandler) *gin.Engine {
	r := gin.Default()
	v1 := r.Group("/api/v1/events")
	{
		v1.Use(handler.LoggingMiddleware())
		v1.POST("/fake-create", handler2.FakeCreateEvent)
	}

	r.GET("/metrics", gin.WrapH(promhttp.Handler()))

	r.GET("/health", handler2.Health)
	ms.Handle("/", r)

	return r
}

func registerServiceWithConsul(config2 *config.Dependencies) error {
	consulConfig := api.DefaultConfig()
	consulConfig.Address = config2.ConsulConfig.Address
	client, err := api.NewClient(consulConfig)
	if err != nil {
		return fmt.Errorf("failed to create Consul client: %w", err)
	}

	registration := &api.AgentServiceRegistration{
		ID:      config2.ConsulConfig.ID,
		Name:    config2.ConsulConfig.Name,
		Port:    config2.ConsulConfig.Port,
		Address: config2.ConsulConfig.Service,
		Check: &api.AgentServiceCheck{
			HTTP:     config2.ConsulConfig.HTTP,
			Interval: "10s",
			Timeout:  "1s",
		},
	}

	return client.Agent().ServiceRegister(registration)
}

func RunServer(router *gin.Engine, config2 *config.Dependencies) error {
	if err := registerServiceWithConsul(config2); err != nil {
		return err
	}
	logger.Info("Registering service with Consul")

	if err := router.Run(":" + config2.RouterConfig.RouterPort); err != nil {
		return err
	}
	return nil
}
